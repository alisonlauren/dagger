<div id="promo-start-date" >
  <div id="promo-start-year"> {{ settings.popup-start-year }} </div> 
  <div id="promo-start-month"> {{ settings.popup-start-month }} </div>
  <div id="promo-start-day"> {{ settings.popup-start-day }} </div>
</div>
    
<style>  
  #promo-start-date{
     display: none !important;
     opacity: 0;
     visibility: hidden;
  }
</style>
    
<script>
  
  //Shows Popup If After Start Date  
  window.onload = function(event) {
    
    /***********************
           START DATE
    ************************/
    {% if settings.popup-enable-start-date %}
      console.log('evaulating date');
    
      currentTime = new Date();
      var month = currentTime.getMonth() + 1;
      var day = currentTime.getDate();
      var year = currentTime.getFullYear();
    
      var startYear = document.getElementById("promo-start-year").innerHTML;
      var startMonth = document.getElementById("promo-start-month").innerHTML - 1;
      var startDay = document.getElementById("promo-start-day").innerHTML;
      
      startDate = new Date( startYear, startMonth, startDay);
          
      console.log("the current date is " + currentTime);
      console.log("the promo starts " + startDate);
        
      //the plus implies milliseconds     
      if(+startDate < +currentTime){
        console.log('showing promo');
        document.getElementById("boxes").style.display = "initial";
        document.getElementById("dialog").style.display = "initial";
      }
    {% endif %}
    
    /***********************
           COOKIES
    ************************/
    {% if settings.popup-enable-cookies %}//if displaying popup is based off most-recent visit
        console.log('cookie debug for popup');

        {% if settings.popup-cookie-duration%}
            cookie_days = {{ settings.popup-cookie-duration }};
        {%else%}
            cookie_days = 30;
        {% endif %}

        cookie_name = 'popup-last-shown';
        cookie_end = cookie_days*24*60*60; //X days * 24 hours/day * 60 minutes/hour * 60 seconds/minute

        if( !docCookies.hasItem(cookie_name) ){		//if cookie does not exist
            console.log('customer hasnt seen popup, writing new cookie');
            docCookies.setItem( cookie_name, new Date(), cookie_end ); //show popup, make cookie with life of cookie_end
        }
        else{ //if it does exist, it hasn't expired, so hide popup
          console.log('customer has seen popup, last at:'+docCookies.getItem(cookie_name));
          $( "#boxes" ).hide();
        }

    {% endif %}
  };  
  
  
</script>


<script>
/*\
|*|
|*|  :: cookies.js ::
|*|
|*|  A complete cookies reader/writer framework with full unicode support.
|*|
|*|  Revision #1 - September 4, 2014
|*|
|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
|*|  https://developer.mozilla.org/User:fusionchess
|*|  https://github.com/madmurphy/cookies.js
|*|
|*|  This framework is released under the GNU Public License, version 3 or later.
|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html
|*|
|*|  Syntaxes:
|*|
|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
|*|  * docCookies.getItem(name)
|*|  * docCookies.removeItem(name[, path[, domain]])
|*|  * docCookies.hasItem(name)
|*|  * docCookies.keys()
|*|
\*/

var docCookies = {
  getItem: function (sKey) {
    if (!sKey) { return null; }
    return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
  },
  setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {
    if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
    var sExpires = "";
    if (vEnd) {
      switch (vEnd.constructor) {
        case Number:
          sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
          break;
        case String:
          sExpires = "; expires=" + vEnd;
          break;
        case Date:
          sExpires = "; expires=" + vEnd.toUTCString();
          break;
      }
    }
    document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
    return true;
  },
  removeItem: function (sKey, sPath, sDomain) {
    if (!this.hasItem(sKey)) { return false; }
    document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
    return true;
  },
  hasItem: function (sKey) {
    if (!sKey) { return false; }
    return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
  },
  keys: function () {
    var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }
    return aKeys;
  }
};
</script>